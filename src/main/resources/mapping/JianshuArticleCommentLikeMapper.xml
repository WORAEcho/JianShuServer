<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sandman.dao.JianshuArticleCommentLikeMapper">
  <resultMap id="BaseResultMap" type="com.sandman.pojo.JianshuArticleCommentLike">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="comment_id" jdbcType="INTEGER" property="commentId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, comment_id, create_time
  </sql>

  <select id="selectLikeCount" parameterType="java.lang.Integer" resultType="map">
    SELECT id,comment_id,count(1) AS like_total FROM jianshu_article_comment_like WHERE comment_id IN
    <foreach collection="list" item="item" open="(" close=")" separator=",">
      #{item}
    </foreach>
    GROUP BY comment_id
  </select>

  <select id="selectLikeCountWithUserId" parameterType="java.lang.Integer" resultType="map">
    SELECT IFNULL(b.id,a.id) as id,a.comment_id,a.like_total,IFNULL(b.liked,0) as liked
    FROM (SELECT id,comment_id,count(1) AS like_total FROM jianshu_article_comment_like WHERE comment_id IN
    <foreach collection="list" item="item" open="(" close=")" separator=",">
      #{item}
    </foreach>
    GROUP BY comment_id) a
    LEFT JOIN
    (SELECT id,comment_id,1 AS liked FROM jianshu_article_comment_like WHERE user_id = #{1}) b
    ON a.comment_id = b.comment_id
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from jianshu_article_comment_like
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from jianshu_article_comment_like
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <insert id="insert" parameterType="com.sandman.pojo.JianshuArticleCommentLike" useGeneratedKeys="true" keyProperty="id">
    insert into jianshu_article_comment_like (user_id, comment_id,
      create_time)
    values (#{userId,jdbcType=INTEGER}, #{commentId,jdbcType=INTEGER},
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.sandman.pojo.JianshuArticleCommentLike" useGeneratedKeys="true" keyProperty="id">
    insert into jianshu_article_comment_like
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="commentId != null">
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sandman.pojo.JianshuArticleCommentLike">
    update jianshu_article_comment_like
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="commentId != null">
        comment_id = #{commentId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sandman.pojo.JianshuArticleCommentLike">
    update jianshu_article_comment_like
    set user_id = #{userId,jdbcType=INTEGER},
      comment_id = #{commentId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>